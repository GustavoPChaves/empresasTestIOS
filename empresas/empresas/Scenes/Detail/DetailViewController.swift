//
//  DetailViewController.swift
//  empresas
//
//  Created by Gustavo Chaves on 18/05/20.
//  Copyright (c) 2020 Gustavo Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: class
{
  func displaySomething(viewModel: Detail.Something.ViewModel)
}

class DetailViewController: UIViewController, DetailDisplayLogic
{
  var interactor: DetailBusinessLogic?
  var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    view.backgroundColor = .white
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DetailInteractor()
    let presenter = DetailPresenter()
    let router = DetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupView()
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    var nameLabel: UILabel!
    var enterpriseDescriptionTextView: UITextView!
    var background: UIView!
  
  func doSomething()
  {
    let request = Detail.Something.Request()
    interactor?.doSomething(request: request)
    
  }
    
    func setupView(){
        background = UIView()
        background.backgroundColor = UIColor(named: "backgroundColor1")
        
        enterpriseDescriptionTextView = UITextView()
        enterpriseDescriptionTextView.allowsEditingTextAttributes = false
        enterpriseDescriptionTextView.textAlignment = .left
        enterpriseDescriptionTextView.font = UIFont(name: "Rubik-Regular", size: 18)
        
        nameLabel = UILabel()
        nameLabel.setup(text: "", color: .white, fontSize: 18)
        view.addSubviews([background, nameLabel, enterpriseDescriptionTextView])
        
        setupConstraints()
    }
    func setupConstraints(){
        background.translatesAutoresizingMaskIntoConstraints = false
        background.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        background.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        background.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        background.heightAnchor.constraint(equalToConstant: 120).isActive = true
        
        nameLabel.translatesAutoresizingMaskIntoConstraints = false
        nameLabel.centerYAnchor.constraint(equalTo: background.centerYAnchor).isActive = true
        nameLabel.centerXAnchor.constraint(equalTo: background.centerXAnchor).isActive = true
        
        enterpriseDescriptionTextView.translatesAutoresizingMaskIntoConstraints = false
        enterpriseDescriptionTextView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16).isActive = true
        enterpriseDescriptionTextView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant:  -16).isActive = true
        enterpriseDescriptionTextView.topAnchor.constraint(equalTo: background.bottomAnchor, constant: 24).isActive = true
        
    }
  
  func displaySomething(viewModel: Detail.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
    nameLabel.text = viewModel.name
    enterpriseDescriptionTextView.text = viewModel.description
    print(viewModel.name)
    print(viewModel.description)
  }
}
